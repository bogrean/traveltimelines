/*!
\page traveltimelines.html
\title Travel Timelines App

\section1 Why another trip planning app?

It can be quite complicated to plan your holidays if you go off the beaten path. \
If you found yourself in a situation that you need to take 3 Inter-city busses, \
1 plane, 1 ferry, a night train and find 2 nights of accommodation just to reach \
your holiday destination, you know it can be difficult to keep track of all your \
reservations and tickets.

This app will help you organise your trip showing all travel events in a timeline, \
displaying details about the events and actions that need to be taken.

\section2 How to use the app

The application revolves around two concepts: the trip and trip events.

Trip events are activitoes that will happend during a trip: you can fly somehwere, take a bus, rent a car,
join a tour, sleep somewhere, etc. Each event will be defined by several properties:
\list
\li Event type: what exactly is this kind of event
\li Event status: in what stage of the planning process is this event? Do we have to plan it? Do we have a confirmed reservation?
\li Event start location: where do we have to be when this events starts. e.g.: airport, port, bus station, etc.
\li Event start date: the date and time when this event is scheduled to start
\li Event end location: where the event is ending. e.g. airport, bus station, port, etc.
\li Event end date: when the event is scheduled to end
\li Event cost: how much it cost do do this event
\li Event cost status: information whether we paid or not for this event
\li Event operator: who is the entoty which takes you in this event? e.g: airline, bus company, hotel, tour operator, etc.
\li User comments: any observations the user feels are relevant
\endlist

Trips are a cronologicaly sequence of trip events. They will be defined by the following properties:
\list
\li Start date: the day when the trip will start
\li End date: the day when the trip will end
\li Trip events: the events making up this trip
\endlist


\section1 Technologies used
\list
\li \l {https://www.qt.io/product/framework} {Qt}
\li Several elements from \l {https://felgo.com/apps} {Felgo SDK}
    \list
    \li Essentials
        \list
        \li \l {https://felgo.com/doc/felgo-app/} {App}
        \li \l {https://felgo.com/doc/felgo-appflickable/} {AppFlickable}
        \li \l {https://felgo.com/doc/felgo-apppage/} {AppPage}
        \endlist
    \li Controls
        \list
        \li \l {https://felgo.com/doc/felgo-appbutton/} {AppButton}
        \li \l {https://felgo.com/doc/felgo-applistview/} {AppListView}
        \li \l {https://felgo.com/doc/felgo-appradio/} {AppRadio}
        \li \l {https://felgo.com/doc/felgo-apptext/} {AppText}
        \li \l {https://felgo.com/doc/felgo-datepicker/} {DatePicker}
        \li \l {https://felgo.com/doc/felgo-dialog/} {Dialog}
        \li \l {https://felgo.com/doc/felgo-iconbutton/} {Iconbutton}
        \li \l {https://felgo.com/doc/felgo-textfieldrow/} {TextFieldRow}
        \endlist
    \li Navigation
        \list
        \li \l {https://felgo.com/doc/felgo-iconbuttonbaritem/} {IconButtonBarItem}
        \li \l {https://felgo.com/doc/felgo-navigationbarrow/} {NavigationBarRow}
        \li \l {https://felgo.com/doc/felgo-navigationstack/} {NavigationStack}
        \endlist
    \endlist
    \li Utility
        \list
        \li \l {https://felgo.com/doc/felgo-storage/} {Storage}
        \endlist
\endlist

\section1 App architecture

Beacuse of the simple architecture flow and features it does not require a complex \
architecture. The chosen architecture is very well described in \
\l {https://felgo.com/doc/apps-howto-model-view-separation/#simple-flux-like-mvc-example-for-qml} {Felgo's MVC Example}

This how the TravelTimelines application is structured based on that architectre
\image app-architecture.png

\section1 How To Do it

\section2 Project setup

The application is based on the Felgo Single Page app template. Use it when creating a new project:
\image select-project-type.png

After selecting the project template, go ahead with the project wizzard. The project createby the wizzard
contains everything you need.

For a clearer code structure you can create the following directories:
\list
\li PROJECT_ROOT/qml/dialogs
\li PROJECT_ROOT/qml/logic
\li PROJECT_ROOT/qml/model
\li PROJECT_ROOT/qml/pages
\endlist
where PROJECT_ROOT is the project directory

\section2 Creating the logic

First, we define what functionality we want our app the handle. In our case, we support similar functionality for
both both trips, and trip events:
\list
\li adding new
\li removing
\li editing existing ones
\endlist

Thus we create the 2 controllers in the PROJECT_ROOT/qml/logic directories: TripsController.qml and EventsController.qml
These are the contents of EventsController.qml:

\quotefile ../qml/logic/TripsController.qml

As you cann see, besides the essential functionality we have two more defined:

\code
signal fetchTripData(int tripId)
\endcode

and

\code
signal reloadTrips()
\endcode

This is functionality that we realized is needed later, so we extended the initial file. This the approach to take when new
functionality is added

In addition to signals defining functionality, a utility function was added for a cleaner overall code:

\quotefromfile ../qml/logic/TripsController.qml
\skipto _createTrip
\printuntil

EventsController.qml has a similar structure.

\section2 Creating the model

The model of the application is implemented in the PROJECT_ROOT/qml/model/TripModel.qml.

We define the required properties, a few helper functions, then we implement the event handlers for the controllers
\snippet ../qml/model/TripModel.qml signal handlers

You can see that here we are implementing allcontrollers signal handlers. Special attention must be paid to ensure that:
\list
\li Trips are kept in chornological order
\li whenever an event is added or editted, we ensure that the trip's start and end date are updated accordingly
\li we expose the right events based on the selected trip, in chronological order
\endlist

\section2 Storage

At this point we are considering only local storage for the data. This is handled by a
\l {https://felgo.com/doc/felgo-storage/} {Storage} instance, added in the TripModel. We have named our database,
so we don't interract with other storage databases:

\snippet ../qml/model/TripModel.qml storage instance

You can see that accessing the storage is easy. For writing we created two helper functions:
\snippet ../qml/model/TripModel.qml writing to storage

\section2 Pages

There are two types of pages we have defined in this app. Overview pages and editing pages.

\section3 Overview pages

Overview pages are pages that do not allow for editing, but present the de details of either a trip or a trip event and
allow adding new trips or trip events, respectively. The two overview pages are PROJECT_ROOT/qml/pages/TripsOverviewPage.qml
and EventsOverviewPage.qml. Both have a similar structure, so we will exemplify with TripsOverviewPage

\quotefromfile ../qml/pages/TripsOverviewPage.qml

The page needs a title, so we set it:

\skipto title
\printline title

Then we configure the navigation bar:

\snippet ../qml/pages/TripsOverviewPage.qml navigation bar

This creates a small "+" button which we'll use to add new trips. As you can see, we navigate to a new page that will handle
the adding of a new trip

Next is creating the model with the trips to be displayed:

\snippet ../qml/pages/TripsOverviewPage.qml object model

Here are exposing the trip objects as a JSON objects, and defines which fields will be used

Then we are displaying the list of trips using an \l {https://felgo.com/doc/felgo-applistview/} {AppListView} with
TripOverview delegates.

\snippet ../qml/pages/TripsOverviewPage.qml trips display

We also add the signal handlers for editing a trip or deleting one.

\section3 Editing pages

Editing pages are pages that allow editing the details of trips and trip events. The two editin pages are
PROJECT_ROOT/qml/pages/AddTripPage.qml and PROJECT_ROOT/qml/pages/EditEventPage.qml. They too have similar structure, so
we will be discussing over AddTripPage only.

The editing page is used both for adding new trips and editing existing trips. Because of this, there are slight
changes in the some areas of the page: title, button texts or values displayed. To be able to do this we used QML states:

\snippet ../qml/pages/AddTripPage.qml states

This code defines the two states this page can be used in, and what is being change in each of these states.

Then we add the content of the page. To ensure we can scroll, we're using an \l {https://felgo.com/doc/felgo-appflickable/} {AppFlickable}:

\snippet ../qml/pages/AddTripPage.qml contents

In the flickable we add the fields we can edit for the trip: the title, start date and end date

At the button of page we add 2 buttons: one for adding events to the trip, whihc will open the EventsOverviewPage with the
events for this trip and one to save the current trip data and jump back to the TripsOverviewPage.

\endsection3

To reuse QML code, several reusable components were created and instantiated by the pages.

\section3 DateField and TimeField

These two components are very similar in structure and usage, the only difference being the dialog they're using
to select the date or time, respectively, and what part of the date they're showing. In hindsight these two components
can bea single component with a few more configuration properties

\quotefile ../qml/pages/DateField.qml

The DateField uses a \l {https://felgo.com/doc/felgo-textfieldrow/} {TextFieldRow} to show a label and the date
representation. When the user wants to edit the date a dialog is opened which allows them to select the date or time.

It is important to notice that the dialog is set as a property and multiple fields could be sharing the same
dialog instance. To avoid updating all fields when using the dialog, special care must be taken to update
only if the field is the one that opened the dialog. This was done as follows:

\snippet ../qml/pages/DateField.qml picker handling

\section3 TripOverview and EventOverview

These two coponents are again very similar in structure. They are design as delegates and have all model data available
as properties.

They are using QML states to slightly alter the how the overview is displayed in various situations. For example the EventOverview
updates it's text based on what event type is being displayed by it:

\snippet ../qml/pages/EventOverview.qml state definition

\quotefromfile ../qml/pages/EventOverview.qml
\skipto state: eventCard.type

And we use the event type to select the state:
\printline state: eventCard.type

Next we display the data fields:

\snippet ../qml/pages/EventOverview.qml contents

It's a basic column of \l {https://felgo.com/doc/felgo-textfieldrow/} {TextFieldRows}, one row per model property.

At the bottom of the overviews, we add two buttons:

\snippet ../qml/pages/EventOverview.qml icon buttons

They trigger notification that the event (or trip, repectively) should be edited or removed. These notifications will be handled by
the instantiating components.

\section2 Dialogs

\section1 What's next?

\list
\li Support for multiple currencies
\li Extend trip details to include cost, time & distance statistics
\li Pick start and end locations via map selection
\li online storage
\li use it on the next holiday and see what the next features are
\endlist

*/
